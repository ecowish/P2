{"version":3,"sources":["nav/index.js","search/index.js","contact/index.js","main/index.js","App.js","serviceWorker.js","index.js","md/privacy.contact.md","logo.svg"],"names":["Navigator","menu_elem","React","createRef","i","menu_list","menu","item","push","caption","id","ref","this","class","onClick","current","display","style","Component","Search","type","name","placeholder","Contact","props","state","category_idx","privacyContact_content","subcategory_elem","category_elem","fetch","privacyContact","then","res","text","result","setState","error","console","for","required","onChange","event","target","selectedIndex","disabled","Config","contactCategory","subcategory","length","selected","map","value","colspan","source","textAlign","Main","elem","document","body","onload","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.4d7a302b.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport menu_list from '../config/config.json';\n\nclass Navigator extends React.Component {\n    constructor() {\n        super();\n\n        this.menu_elem = React.createRef();\n    }\n    render() {\n        var menu_elem = [];\n        for (var i in menu_list.menu) {\n            var item = menu_list.menu[i];\n            menu_elem.push(\n                <li>{item.caption}</li>\n            );\n        }\n        return <nav>\n            <ul id=\"menu\" ref={this.menu_elem}> {\n                menu_elem\n            } </ul>\n            <button class=\"span noselect\" onClick={() => {\n                var menu = this.menu_elem.current;\n                var display = menu.style.display;\n                \n                menu.style.display = (display == 'block')? 'none':'block';\n            }}>[메뉴]</button>\n        </nav>;\n    }\n}\n\nexport default Navigator;","import React from 'react';\n\nclass Search extends React.Component {\n    render() {\n        return <form id=\"search\">\n            <input type=\"text\" id=\"query\" name=\"query\" placeholder=\"검색\" />\n            <span>[검색]</span>\n        </form>;\n    }\n}\n\nexport default Search;","import React from 'react';\nimport Config from '../config/config.json';\nimport Markdown from 'react-markdown';\nimport privacyContact from '../md/privacy.contact.md';\n\nclass Contact extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            category_idx: -1,\n            privacyContact_content: \"\"\n        };\n\n        this.subcategory_elem = React.createRef();\n        this.category_elem = React.createRef();\n    }\n\n    componentDidMount() {\n        fetch(privacyContact)\n        .then(res => res.text())\n        .then((result) => {\n            this.setState({\n                privacyContact_content: result\n            });\n        }, (error) => {\n            console.error(error);\n        });\n    }\n\n    render() {\n        return [\n            <h1>Contact Us</h1>,\n            <form>\n                <div>\n                    <table>\n                        <tbody>\n                            <tr>\n                                <th><label for=\"category\">Category *</label></th>\n                                <td><select id=\"category\" name=\"category\" required onChange={(event) => {\n                                    this.setState({\n                                        category_idx: event.target.selectedIndex - 1\n                                    });\n\n                                    var subcategory_elem = this.subcategory_elem.current;\n                                    subcategory_elem.disabled = (Config.contactCategory[event.target.selectedIndex - 1].subcategory.length == 0);\n                                    subcategory_elem.selectedIndex = 0;\n                                }} ref={this.category_elem}>\n                                    <option disabled selected>Select Category...</option>\n                                    {\n                                        Config.contactCategory.map((item) => (\n                                            <option value={item.value}>{item.caption}</option>\n                                        ))\n                                    }\n                                </select></td>\n                                <td><select name=\"subcategory\" disabled ref={this.subcategory_elem}>\n                                    <option disabled selected>Select Category...</option>\n                                    {\n                                        (Config.contactCategory[this.state.category_idx] && Config.contactCategory[this.state.category_idx].subcategory) && \n                                        Config.contactCategory[this.state.category_idx].subcategory.map((item) => (\n                                                <option value={item.value}>{item.caption}</option>\n                                            ))\n                                    }\n                                </select>\n                                </td>\n                            </tr>\n                            <tr>\n                                <th><label for=\"email\">E-Mail *</label></th>\n                                <td colspan=\"2\"><input type=\"email\" name=\"email\" id=\"email\" required /></td>\n                            </tr>\n                            <tr>\n                                <th><label for=\"content\">Content *</label></th>\n                                <td colspan=\"2\"><textarea id=\"content\" name=\"content\" required></textarea></td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div>\n                    <Markdown source={this.state.privacyContact_content} />\n                    <p><input type=\"checkbox\" id=\"agreePrivacy\" required /><label for=\"agreePrivacy\">위 내용에 동의합니다.</label></p>\n                </div>\n                <p style={{ textAlign: \"right\" }}><button type=\"submit\">Submit</button></p>\n            </form>\n        ];\n    }\n}\n\nexport default Contact;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Contact from '../contact';\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            elem: null\n        };\n    }\n    render() {\n        document.body.onload = () => {\n            var elem = <Contact />;\n            this.setState({elem: elem});\n        }\n        return <main>\n            {this.state.elem}\n        </main>;\n    }\n}\n\nexport default Main;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './App.test.css';\nimport Navigator from './nav';\nimport Search from './search';\nimport Main from './main';\n\nclass App extends React.Component {\n    render() {\n        return [\n            <header>\n                <Navigator />\n                <Search />\n            </header>,\n            <Main />,\n            <footer>\n                <div>\n                    <p>Eco-Ending</p>\n                    <address>77, Jeongneung-ro, Seongbuk-gu, Seoul, Republic of Korea</address>\n                    <p>(C) 2020 Eco-Ending.</p>\n                </div>\n            </footer>\n        ];\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.body);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/privacy.contact.e180271a.md\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}